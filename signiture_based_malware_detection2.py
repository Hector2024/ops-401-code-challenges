#!/usr/bin/env python3 

# Script Name:                          signiture_based_malware_detection2.py
# Author name:                          Hector Cordova 
# Date of latest revision:              20FEB2023
# Purpose:                              To look for and locate files prompted by user, then generate an MD5 hash
# Execution:                            python3 
# Additional Resources:                 https://docs.python.org/3/library/hashlib.html, https://www.programiz.com/python-programming/examples/hash-file, https://chat.openai.com/share/195abccf-2fa3-4476-ac87-66f03fcebaac


import os
import hashlib
import time

def search_files(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            # Ensure it's not a symbolic link
            if not os.path.islink(file_path):
                try:
                    with open(file_path, 'rb') as f:
                        # Generate MD5 hash for the file
                        md5_hash = hashlib.md5()
                        while chunk := f.read(4096):
                            md5_hash.update(chunk)
                        md5_digest = md5_hash.hexdigest()
                        # Get file size
                        file_size = os.path.getsize(file_path)
                        # Get file modification time
                        mod_time = os.path.getmtime(file_path)
                        # Convert modification time to a human-readable format
                        mod_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mod_time))
                        # Print file details
                        print(f"Timestamp: {mod_time_str}, File Name: {file}, File Size: {file_size} bytes, MD5 Hash: {md5_digest}, Path: {file_path}")
                except Exception as e:
                    print(f"Error processing {file_path}: {e}")

def main():
    directory = input("Enter the directory to search in: ")

    if not os.path.isdir(directory):
        print("Invalid directory!")
        return

    print(f"Searching in '{directory}'...")
    search_files(directory)

if __name__ == "__main__":
    main()
