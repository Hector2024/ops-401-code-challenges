#!/usr/bin/env python3 

# Script Name:                          signiture_based_malware_detection3.py
# Author name:                          Hector Cordova 
# Date of latest revision:              21FEB2023
# Purpose:                              connect to the VirusTotal API, Automatically compare target fileâ€™s md5 hash with the hash values of entries on VirusTotal API, Print to the screen the number of positives detected and total files scanned
# Execution:                            python3 
# Additional Resources:                 https://docs.virustotal.com/reference/overview#file-scan, https://www.tines.com/blog/virustotal-api-security-automation, https://www.youtube.com/watch?v=D925hYZjKY0&t=359s, https://github.com/eduardxyz/virustotal-search, https://chat.openai.com/share/195abccf-2fa3-4476-ac87-66f03fcebaac

import os
import hashlib
import time
import requests

VIRUSTOTAL_API_KEY =""

def search_files(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if not os.path.islink(file_path):
                try:
                    with open(file_path, 'rb') as f:
                        # Generate MD5 hash for the file
                        md5_hash = hashlib.md5()
                        while chunk := f.read(4096):
                            md5_hash.update(chunk)
                        md5_digest = md5_hash.hexdigest()
                        # Connect to VirusTotal API and check if the file hash is present
                        url = f"https://www.virustotal.com/api/v3/files/{md5_digest}"
                        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
                        response = requests.get(url, headers=headers)
                        if response.status_code == 200:
                            data = response.json()
                            if 'data' in data:
                                positives = data['data']['attributes']['last_analysis_stats']['malicious']
                                total_scans = data['data']['attributes']['last_analysis_stats']['total']
                                print(f"File: {file_path}, Positives: {positives}, Total Scans: {total_scans}")
                            else:
                                print(f"File: {file_path} not found on VirusTotal.")
                        else:
                            print(f"Error connecting to VirusTotal API: {response.status_code}")
                except Exception as e:
                    print(f"Error processing {file_path}: {e}")

def main():
    directory = input("Enter the directory to search in: ")

    if not os.path.isdir(directory):
        print("Invalid directory!")
        return

    print(f"Searching in '{directory}'...")
    search_files(directory)

if __name__ == "__main__":
    main()
